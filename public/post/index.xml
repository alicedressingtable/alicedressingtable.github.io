<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on blog</title>
    <link>http://localhost:1313/post/</link>
    <description>Recent content in Posts on blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-EN</language>
    <copyright>(c) 2015 Alessandro Baffa.</copyright>
    <lastBuildDate>Sat, 18 Feb 2017 08:03:16 +0100</lastBuildDate>
    
	<atom:link href="http://localhost:1313/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Changing Everything. Again.</title>
      <link>http://localhost:1313/2017/02/18/changing-everything.-again./</link>
      <pubDate>Sat, 18 Feb 2017 08:03:16 +0100</pubDate>
      
      <guid>http://localhost:1313/2017/02/18/changing-everything.-again./</guid>
      <description>After 7 years spent in France I am officially moving to Tokyo, Japan, end of May 2017. I am finally going to join my wife, Sarah, after almost 5 years of long and hard distant relationship.
Now, before to start with the burocracy madness and to move/sell/close/sign things, I am sitting here at home, in the first weekend after having resigned from my current company, trying to think about how many things I learned over the last 7 years.</description>
    </item>
    
    <item>
      <title>Raising The Bar With Science</title>
      <link>http://localhost:1313/2016/11/06/raising-the-bar-with-science/</link>
      <pubDate>Sun, 06 Nov 2016 17:46:50 +0100</pubDate>
      
      <guid>http://localhost:1313/2016/11/06/raising-the-bar-with-science/</guid>
      <description>During SoCraTes France we had a session called Beyond Alchemy and What are the Software Leprechauns? with Laurent Bossavit, author of The Leprechauns of Software Engineering. We discussed about what we could do, as a community of professional developers, to raise the bar of our industry by starting to merge the scientific method used by academics and the huge amount of data from the real world of the industry.</description>
    </item>
    
    <item>
      <title>Back from SoCraTes France 2016</title>
      <link>http://localhost:1313/2016/10/31/back-from-socrates-france-2016/</link>
      <pubDate>Mon, 31 Oct 2016 12:29:46 +0200</pubDate>
      
      <guid>http://localhost:1313/2016/10/31/back-from-socrates-france-2016/</guid>
      <description>My second time in a Software Craftsmanship and Testing (SoCraTes) conference and, as always, it has been an awesome experience.
The self-made agenda SoCraTes is a non-conference, which means that there’s no predefined agenda, but instead it is created every day by the participants (the image above is the agenda of day 2). Everybody is more than welcome to propose sessions. They can be presentation of something you know, or open discussion about a topic you are curious about, or more simply a session where you want to learn something and you are looking for someone more experienced to help you.</description>
    </item>
    
    <item>
      <title>Global Day of Coderetreat 2016, Sophia Antipolis, France</title>
      <link>http://localhost:1313/2016/10/23/global-day-of-coderetreat-2016-sophia-antipolis-france/</link>
      <pubDate>Sun, 23 Oct 2016 12:29:46 +0200</pubDate>
      
      <guid>http://localhost:1313/2016/10/23/global-day-of-coderetreat-2016-sophia-antipolis-france/</guid>
      <description>We did it! The Global Day of Coderetreat in Sophia Antipolis has been a great success! My first coderetreat ever, and I played the role of the organizer and facilitator. It’s an event that I started to organize in August and I have been lucky to find the support of the University of Nice-Sophia Antipolis and my company, Amadeus IT Group. In the organization of all this I have been hugely helped by other people who have been facilitators with me (we were 3 facilitators, 1 host and 2 facilitators/helpers).</description>
    </item>
    
    <item>
      <title>Dependency Injection VS Extract and Override Factory Method</title>
      <link>http://localhost:1313/2016/10/09/dependency-injection-vs-extract-and-override-factory-method/</link>
      <pubDate>Sun, 09 Oct 2016 21:17:23 +0200</pubDate>
      
      <guid>http://localhost:1313/2016/10/09/dependency-injection-vs-extract-and-override-factory-method/</guid>
      <description>The TextConverter exercise (in the Racing Car kata suite) is a very interesting exercise for refactoring legacy code. As I am reading Working Effectively with Legacy Code I found two ways of solving it.
Refactoring can only be done safely with unit tests and so I did, rigourously in TDD. Though, in this blog post I am not going to show you all the testing process, but only the two ways of decoupling the dependency.</description>
    </item>
    
    <item>
      <title>How Can You Say You’re A Software Crafts(wo)man?</title>
      <link>http://localhost:1313/2016/08/06/how-can-you-say-youre-a-software-craftswoman/</link>
      <pubDate>Sat, 06 Aug 2016 12:29:46 +0200</pubDate>
      
      <guid>http://localhost:1313/2016/08/06/how-can-you-say-youre-a-software-craftswoman/</guid>
      <description>This is a question that came up yesterday during our latest meetup with our local French Riviera Software Craftsmanship Community (note: a very nice round table session on the beach of Juan Les Pins ). This post is my answer to this question.
What Software Craftsmanship is not It’s not an elitist club of people who think to hold the truth of how to write the perfect code. This is an important aspect because it is related to how much inclusive or exclusive a group of people is (and also to how much nice people are).</description>
    </item>
    
    <item>
      <title>Transformation Priority Premise: overcome the fear of new tests</title>
      <link>http://localhost:1313/2016/07/05/transformation-priority-premise-overcome-the-fear-of-new-tests/</link>
      <pubDate>Tue, 05 Jul 2016 21:29:11 +0200</pubDate>
      
      <guid>http://localhost:1313/2016/07/05/transformation-priority-premise-overcome-the-fear-of-new-tests/</guid>
      <description>The Transformation Priority Premise (TPP) is a great empirical list of transformations that you can apply in your code when you’re working in TDD:
When do you need it? Practicing with TDD I realized that sometimes I reach a point when I get stuck: I am almost scared to add a new particular test because I already know it’s going to force me to completely rewrite the structure of the code.</description>
    </item>
    
    <item>
      <title>Practicing TDD: FizzBuzz kata in Golang</title>
      <link>http://localhost:1313/2016/06/19/practicing-tdd-fizzbuzz-kata-in-golang/</link>
      <pubDate>Sun, 19 Jun 2016 21:28:49 +0200</pubDate>
      
      <guid>http://localhost:1313/2016/06/19/practicing-tdd-fizzbuzz-kata-in-golang/</guid>
      <description>My implementation:
and here the list of all the steps that I’ve done to implement it in TDD on my github account.</description>
    </item>
    
    <item>
      <title>A Community of Professionals - SoCraTes UK</title>
      <link>http://localhost:1313/2016/06/19/a-community-of-professionals---socrates-uk/</link>
      <pubDate>Sun, 19 Jun 2016 21:28:33 +0200</pubDate>
      
      <guid>http://localhost:1313/2016/06/19/a-community-of-professionals---socrates-uk/</guid>
      <description>A couple of weeks ago I participated for the first time to a SoCraTes event, one of the Software Craftsmanship international gatherings. SoCraTes (Software Craftsmanship and Testing) is an self-organized conference where the people from the international Software Craftsmanship Community meet and spend 3 days organizing themselves activities and talks around everything related to software craftsmanship: from the technical to the human aspects of it. There are few events of this kind every year (Italy, France, Germany, Belgium, Switzerland, Romania, Finland, Canaries) and I participated to the one in UK.</description>
    </item>
    
    <item>
      <title>First try with concurrency in Go</title>
      <link>http://localhost:1313/2016/05/16/first-try-with-concurrency-in-go/</link>
      <pubDate>Mon, 16 May 2016 21:04:53 +0200</pubDate>
      
      <guid>http://localhost:1313/2016/05/16/first-try-with-concurrency-in-go/</guid>
      <description>It&amp;rsquo;s been a while I&amp;rsquo;m practicing with Go, but I had still never tried its concurrency features so far. My bad.
Fortunately exercism.io has just introduced me to this topic with the exercise &amp;ldquo;Parallel Letter Frequency&amp;rdquo; exercise&amp;rdquo;.
The core of my solution is here (I let you read the comments).
Basically the exercise asks you to count the frequency of the letters in 3 different strings. They provide you with already a function that counts the frequency, but you are asked to call that function with 3 calls in parallel (one call for each string) and to collect the result (the total frequencies from all the 3 strings).</description>
    </item>
    
    <item>
      <title>The Paradox Of Choice In Learning to Code</title>
      <link>http://localhost:1313/2016/05/16/the-paradox-of-choice-in-learning-to-code/</link>
      <pubDate>Mon, 16 May 2016 15:37:25 +0200</pubDate>
      
      <guid>http://localhost:1313/2016/05/16/the-paradox-of-choice-in-learning-to-code/</guid>
      <description>I was talking with a guy some days ago and it went like this:
 he told me &amp;ldquo;I really would like to start improving myself and I need a pet project..&amp;ldquo; I said &amp;ldquo;great idea! But where do you want to improve?&amp;ldquo; he said &amp;ldquo;..that&amp;rsquo;s the problem: I still don&amp;rsquo;t know what I want to use. There are so many things out there that I would like to learn &amp;hellip; and I don&amp;rsquo;t know where to start&amp;hellip;&amp;ldquo;  This made me think about a book I read some time ago called &amp;ldquo;The Paradox of Choice: Why More Is Less&amp;rdquo; (the author gave also an awesome TED Talk about it).</description>
    </item>
    
    <item>
      <title>Bowling kata in Go</title>
      <link>http://localhost:1313/2016/05/16/bowling-kata-in-go/</link>
      <pubDate>Mon, 16 May 2016 12:10:33 +0200</pubDate>
      
      <guid>http://localhost:1313/2016/05/16/bowling-kata-in-go/</guid>
      <description>This is my solution for the Bowling Kata, written in Go.
</description>
    </item>
    
    <item>
      <title>Be careful with slice</title>
      <link>http://localhost:1313/2016/03/31/be-careful-with-slice/</link>
      <pubDate>Thu, 31 Mar 2016 06:56:10 +0200</pubDate>
      
      <guid>http://localhost:1313/2016/03/31/be-careful-with-slice/</guid>
      <description>Slices are a great tool in Go, but sometimes they can be confused with arrays. A small reminder: slices are a pointer into an underline array. Let&amp;rsquo;s take this example:
array := []int{1, 2, 3, 4, 5, 6} slice := array[1:3] // let&#39;s print both fmt.Println(&amp;quot;array: &amp;quot;, array) fmt.Println(&amp;quot;slice: &amp;quot;, slice) // array: [1 2 3 4 5 6] // slice: [2 3]  Since the slice is only a pointer to the underline array, if you do some operations with the elements of the array you are also changing the elements of the slice.</description>
    </item>
    
    <item>
      <title>Surrounding yourself with the right people</title>
      <link>http://localhost:1313/2016/02/23/surrounding-yourself-with-the-right-people/</link>
      <pubDate>Tue, 23 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/2016/02/23/surrounding-yourself-with-the-right-people/</guid>
      <description>I was 8 years old when I started playing guitar. It was not my choice, though, but my parents’ who forced me to start taking some lessons. I hated it at the beginning: hours of solfège, and I wasn’t even able to play the most stupid song. No chords, nothing at all.
Nevertheless I had some natural talent for music (I’m gifted with the so called musical ear. And so my brother and sister are - the Force is strong in my family), and maybe my parents knew that and that’s why they persisted so much with me.</description>
    </item>
    
    <item>
      <title>Things to consider before open sourcing your project written in go</title>
      <link>http://localhost:1313/2015/11/26/things-to-consider-before-open-sourcing-your-project-written-in-go/</link>
      <pubDate>Thu, 26 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/2015/11/26/things-to-consider-before-open-sourcing-your-project-written-in-go/</guid>
      <description>so, you want to finally release your preciousss written in Go to the open source community. Great! And thank you. Though, there are few things you may want to consider before doing the big step. Things that you may have missed perhaps because you are not yet 100% comfortable with Go (but “_I will improve later. Now let me just put this gem on Github._”). You have to know that the Go community can be quite strict when it comes to its idioms and conventions.</description>
    </item>
    
    <item>
      <title>Back from dotgo 2015</title>
      <link>http://localhost:1313/2015/11/10/back-from-dotgo-2015/</link>
      <pubDate>Tue, 10 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/2015/11/10/back-from-dotgo-2015/</guid>
      <description>Today I’ve been at the dotGo conference in Paris, the European conference about the Go programming language. Quick summary: fantastic!
It’s the second time I participate (I’ve been there also last year, 2014) and I found exactly the same impeccable organization, a beautiful location (with lots of food..), a great ambiance, and the talks, as usual, have been extremely interesting, inspiring and cool. Some of them (not in the same order of the conference):</description>
    </item>
    
  </channel>
</rss>